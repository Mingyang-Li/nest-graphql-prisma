# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Payment {
  id: String
  amount: Float
  currency: String
  dateOfPayment: DateTime
  from: String
  to: String
  createdAt: DateTime
  updatedAt: DateTime
  archivedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  payments(where: PaymentWhereInput, orderBy: [PaymentOrderByInput!], skip: Float, take: Float): [Payment!]!
}

input PaymentWhereInput {
  id: StringFilter
  amount: FloatNullableFilter
  currency: StringNullableFilter
  dateOfPayment: DateTimeNullableFilter
  from: StringNullableFilter
  to: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  archivedAt: DateTimeNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: String
}

enum QueryMode {
  Default
  Insensitive
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: Float
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: String
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTime
}

input PaymentOrderByInput {
  id: SortOrder
  amount: SortOrder
  currency: SortOrder
  dateOfPayment: SortOrder
  from: SortOrder
  to: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  archivedAt: SortOrder
}

enum SortOrder {
  Asc
  Desc
}

type Mutation {
  createPayment(data: PaymentCreateInput!): Payment!
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment!
}

input PaymentCreateInput {
  amount: Float
  currency: String
  dateOfPayment: DateTime
  from: String
  to: String
  createdAt: DateTime
  updatedAt: DateTime
  archivedAt: DateTime
}

input PaymentWhereUniqueInput {
  id: String!
}

input PaymentUpdateInput {
  amount: Float
  currency: String
  dateOfPayment: DateTime
  from: String
  to: String
  createdAt: DateTime
  updatedAt: DateTime
  archivedAt: DateTime
}